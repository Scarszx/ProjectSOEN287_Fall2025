textProjectSOEN287_Fall2025/
├── index.html
├── css/
│   └── styles.css
├── js/
│   └── script.js
├── README.md
└── .gitignore

Create these files/folders manually or using your IDE (e.g., VS Code).
index.html: Main HTML file for your web project.
css/styles.css: Stylesheet for your project.
js/script.js: JavaScript file for interactivity.
README.md: A markdown file to describe your project (purpose, setup instructions, etc.).
.gitignore: Specifies files/folders Git should ignore (e.g., node_modules/, .env, or editor-specific files like .vscode/). Example .gitignore:
textnode_modules/
*.env
.DS_Store
.vscode/


Step 3: Add Initial Files to Git
Stage and commit your initial project files:
bashgit add .
git commit -m "Initial commit: Set up project structure with HTML, CSS, and JavaScript"

git add . stages all files in the current directory.
git commit -m "message" creates a commit with a descriptive message.

Step 4: Push to GitHub
Push your local changes to the remote GitHub repository:
bashgit push origin main

Assumes the default branch is main (it might be master in older setups; check with git branch).
If you’re prompted for credentials, use your GitHub username and PAT (or SSH if configured).

Step 5: Configure Team Collaboration
Since this is a team project, ensure smooth collaboration:

Add Collaborators: The repository owner (Scarszx) should invite team members via GitHub: Repository > Settings > Collaborators and teams > Add people. Each member needs a GitHub account and must accept the invitation.
Set Up Branches: Use branches to manage work. Each team member can create a feature branch:
bashgit checkout -b feature/your-feature-name
Example: feature/add-login-page. Work on your feature, commit changes, and push the branch:
bashgit push origin feature/your-feature-name

Pull Requests (PRs): Create PRs on GitHub to merge feature branches into main. Go to the repository on GitHub, select the branch, and click “New Pull Request.” Assign reviewers to ensure code quality.
Branch Protection Rules: The owner should set up branch protection for main (Settings > Branches > Branch protection rules) to prevent direct pushes and require PR reviews.

Step 6: Install Dependencies (If Needed)
If your project uses JavaScript libraries (e.g., React, jQuery) or tools like Node.js:

Initialize a Node.js project (if applicable):
bashnpm init -y
This creates a package.json file.
Install dependencies, e.g.:
bashnpm install <library-name>

Commit the package.json and package-lock.json (but not node_modules/, which should be in .gitignore).
Team members can install dependencies with npm install after cloning.

Step 7: Regularly Pull Updates
To stay in sync with team changes:
bashgit pull origin main

Run this before starting work to avoid conflicts.
If conflicts occur, resolve them manually in the affected files, then stage and commit the resolutions.

Step 8: Additional Best Practices

Commit Often: Make small, frequent commits with clear messages (e.g., “Add CSS for navbar”).
Write a Good README: Include project setup instructions, e.g., “Run npm install to install dependencies, then open index.html in a browser.”
Use a Linter: For code consistency, use tools like ESLint (for JavaScript) or Prettier (for HTML/CSS/JS). Install via npm and configure in your project.
Test Locally: Use a local server (e.g., npx live-server) to test your web project instead of opening index.html directly in a browser.
Document Team Workflow: Agree on conventions (e.g., branch naming, commit message format) and document them in the README or a CONTRIBUTING.md file.

3. Common Issues and Tips

Authentication Issues: If you get “Invalid username or token,” double-check your PAT or SSH setup (see previous answer for details).
Permission Errors: If you can’t push or clone, ensure you’re a collaborator on the repository.
Merge Conflicts: If team members edit the same file, conflicts may arise. Resolve them by editing the conflicting files, then:
bashgit add <file>
git commit

Empty Repository Confusion: If the repository remains empty after cloning, it’s normal for a new GitHub repo. You need to add files locally and push them.

4. Example Workflow for a Team Member

Clone the repo: git clone https://github.com/Scarszx/ProjectSOEN287_Fall2025.git.
Create a branch: git checkout -b feature/add-homepage.
Add/edit files (e.g., update index.html and css/styles.css).
Commit changes: git add . && git commit -m "Add homepage layout".
Push branch: git push origin feature/add-homepage.
Create a PR on GitHub, get it reviewed, and merge into main.
Pull updates: git checkout main && git pull origin main.

5. Summary

No git init if you’re cloning the existing GitHub repository.
Key steps: Clone, create project structure, commit/push initial files, set up collaboration (branches, PRs), and establish a workflow.
For HTML/CSS/JS: Focus on a clear project structure, use .gitignore for node_modules, and test locally.
Teamwork: Use branches and PRs, communicate clearly, and document processes.
